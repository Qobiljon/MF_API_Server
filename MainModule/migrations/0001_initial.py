# Generated by Django 2.2.3 on 2019-07-11 11:26

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Intervention',
            fields=[
                ('description', models.CharField(max_length=128, primary_key=True, serialize=False)),
                ('creation_method', models.SmallIntegerField(default=0)),
                ('is_public', models.BooleanField(default=True)),
                ('number_of_selections', models.IntegerField(default=0)),
                ('number_of_likes', models.IntegerField(default=0)),
                ('number_of_dislikes', models.IntegerField(default=0)),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=128)),
                ('start_ts', models.BigIntegerField()),
                ('end_ts', models.BigIntegerField()),
                ('repetition_id', models.BigIntegerField(default=0)),
                ('repeat_mode', models.SmallIntegerField()),
                ('repeat_till', models.BigIntegerField(default=0)),
                ('event_reminder', models.SmallIntegerField()),
                ('intervention_reminder', models.SmallIntegerField(default=0)),
                ('expected_stress_level', models.PositiveSmallIntegerField()),
                ('expected_stress_type', models.CharField(max_length=32)),
                ('expected_stress_cause', models.CharField(max_length=128)),
                ('evaluated', models.BooleanField(default=False)),
                ('real_stress_level', models.PositiveSmallIntegerField(default=0)),
                ('intervention', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='MainModule.Intervention')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='MainModule.Event')),
                ('start_ts', models.BigIntegerField()),
                ('end_ts', models.BigIntegerField()),
                ('real_stress_level', models.PositiveSmallIntegerField()),
                ('real_stress_cause', models.CharField(default='', max_length=128)),
                ('journal', models.CharField(default='', max_length=128)),
                ('event_done', models.BooleanField()),
                ('intervention_done', models.BooleanField()),
                ('intervention_effectiveness', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.BigIntegerField()),
                ('values', models.CharField(max_length=500, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'timestamp')},
            },
        ),
    ]
